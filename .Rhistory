legend.position = "top",
strip.text = element_text(face = "bold"),
panel.grid.minor = element_blank()
)
fwer_correction
generate_mixed_draws <- function(n = 50, mu_null = 0, mu_alt = 0.5, sd = 1, probs = c(0.8, 0.2)) {
n_var <- seq(3,24,4)
results <- map(n_var, \(i) {
total_tests <- (i * (i - 1) / 2)
n_H0 <- round(total_tests * probs[1])
n_H1 <- total_tests - n_H0
truth <- c(rep("H0_true", n_H0), rep("H1_true", n_H1))
map(1:500, \(j) {
map(1:total_tests, \(k) {
if (truth[k] == "H0_true") {
x <- rnorm(n, mean = mu_null, sd = sd)
y <- rnorm(n, mean = mu_null, sd = sd)
} else {
x <- rnorm(n, mean = mu_null, sd = sd)
y <- rnorm(n, mean = mu_alt, sd = sd)
}
pval <- t.test(x, y, var.equal = TRUE)$p.value
tibble(n_var = i, total_tests = total_tests, iteration = j, truth = truth[k], p = pval)
}) %>% list_rbind()
}) %>% list_rbind()
}) %>% list_rbind()
results
}
results<-generate_mixed_draws
results<-generate_mixed_draws()
methods <- c("none","bonferroni", "BH") %>% set_names()
fwer_correction <- map(methods, \(m) {
calc_disc_rate_adj(results,m)
}) %>% list_rbind(names_to = "method")
fwer_correction_long <- fwer_correction %>%  pivot_longer(
cols = c(fwer, mean_n_type_I, mean_power),
names_to = "metric",
values_to = "value"
)
ggplot(fwer_correction_long, aes(x = total_tests, y = value, color = method)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
facet_wrap(~ metric, scales = "free_y", ncol = 1,
labeller = as_labeller(c(
fwer = "Familywise Error Rate",
mean_n_type_I = "Mean number of Type I Errors",
mean_power = "Power (%)"
))) +
scale_color_brewer(palette = "Dark2") +
labs(
x = "Number of tests",
y = "Value",
color = "Correction Method",
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "top",
strip.text = element_text(face = "bold"),
panel.grid.minor = element_blank()
)
d1 <- tibble(values = c(2.95, 5.12, 5.68, 5.43, 5.12,
2.81, 1.62, 2.51, 1.94, 3.92,
5.72, 6.81, 4.88, 4.67,
1.81, 4.32, 3.09, 3.02),
group = c(rep(c("A", "B"), each = 5),
rep(c("C", "D"), each = 4)))
d2 <- tibble(values = c(4.76, 2.76, 4.31, 7.48, 4.99,
3.29, 4.71, 1.07, 1.17,
5.72, 4.31, 4.23, 7.81,
4.27, 3.93, -0.08, 3.32, 3.86),
group = c(rep("A", 5),
rep(c("B", "C"), each = 4),
rep("D", 5)))
d3 <- tibble(values = c(5.86, 3.91, 5.2, 3.52,
4.84, 3.03, 3.27, 2.92,
5.36, 4.06, 4.21, 4.58, 2.69,
4.23, 4.77, 4.19, 3.01, 2.27),
group = c(rep(c("A", "B"), each = 4),
rep(c("C", "D"), each = 5)))
ggplot(d1,aes(x=group, y = values)) +
geom_point()
ggplot(d2,aes(x=group, y = values)) +
geom_point()
ggplot(d3,aes(x=group, y = values)) +
geom_point()
create_nvariables <- function(nvar, n, mean, sd, sd_noise) {
x <- rnorm(n = n, mean = mean, sd = sd)
dat <- map(1:nvar, \(i) {
tibble(!!paste0("var_", i) := x + rnorm(n = n, mean = 0, sd = sd_noise))
}) |>
list_cbind()
dat
}
semi_independent <- map(n_var, \(i) {
map(1:100, \(j) {
dat <- create_nvariables(i,20,0,1)
combs <- combn(colnames(dat), 2)
map2(dat[combs[1,]],dat[combs[2,]], \(c1,c2) {
pval <- t.test(c1,c2,var.equal=TRUE,alpha=0.05)$p.value
tibble(n_var = i, total_tests = dim(combs)[2], iteration = j,  p = pval)
}) %>% list_rbind()}) %>% list_rbind()}) %>% list_rbind()
semi_independent <- map(n_var, \(i) {
map(1:100, \(j) {
dat <- create_nvariables(i,20,0,1,sd_noise = 0.5)
combs <- combn(colnames(dat), 2)
map2(dat[combs[1,]],dat[combs[2,]], \(c1,c2) {
pval <- t.test(c1,c2,var.equal=TRUE,alpha=0.05)$p.value
tibble(n_var = i, total_tests = dim(combs)[2], iteration = j,  p = pval)
}) %>% list_rbind()}) %>% list_rbind()}) %>% list_rbind()
fwers2 <- correlated  %>%
group_by(total_tests, iteration) %>%
summarise(any_type_I = any(p <= 0.05), n_type_I = sum(p <= 0.05), .groups = "drop") %>%
group_by(total_tests) %>%
summarise(
fwer = mean(any_type_I),
mean_n_type_I = mean(n_type_I),
.groups = "drop"
)
fwers2 <- semi_independent  %>%
group_by(total_tests, iteration) %>%
summarise(any_type_I = any(p <= 0.05), n_type_I = sum(p <= 0.05), .groups = "drop") %>%
group_by(total_tests) %>%
summarise(
fwer = mean(any_type_I),
mean_n_type_I = mean(n_type_I),
.groups = "drop"
)
fwers2
correlated <- map(n_var, \(i) {
map(1:100, \(j) {
dat <- create_nvariables(i,20,0,1,sd_noise = 1)
combs <- combn(colnames(dat), 2)
map2(dat[combs[1,]],dat[combs[2,]], \(c1,c2) {
pval <- t.test(c1,c2,var.equal=TRUE,alpha=0.05)$p.value
tibble(n_var = i, total_tests = dim(combs)[2], iteration = j,  p = pval)
}) %>% list_rbind()}) %>% list_rbind()}) %>% list_rbind()
fwers2 <- correlated  %>%
group_by(total_tests, iteration) %>%
summarise(any_type_I = any(p <= 0.05), n_type_I = sum(p <= 0.05), .groups = "drop") %>%
group_by(total_tests) %>%
summarise(
fwer = mean(any_type_I),
mean_n_type_I = mean(n_type_I),
.groups = "drop"
)
fwers2
fwer_theoretical <- tibble(
total_tests = fwers2$total_tests,
fwer = 1 - (1 - 0.05) ^ total_tests,
mean_n_type_I = 0.05 * total_tests
)
fwer_theoretical
fwer_combined <- bind_rows(list(indep = fwers, correl = fwers2, theor = fwer_theoretical), .id = "type")
fwer_combined
fwer_independent <- independent %>%
group_by(total_tests, iteration) %>%
summarise(any_type_I = any(p <= 0.05), n_type_I = sum(p <= 0.05), .groups = "drop") %>%
group_by(total_tests) %>%
summarise(
fwer = mean(any_type_I),
mean_n_type_I = mean(n_type_I),
.groups = "drop"
)
fwer_correlated <- correlated  %>%
group_by(total_tests, iteration) %>%
summarise(any_type_I = any(p <= 0.05), n_type_I = sum(p <= 0.05), .groups = "drop") %>%
group_by(total_tests) %>%
summarise(
fwer = mean(any_type_I),
mean_n_type_I = mean(n_type_I),
.groups = "drop"
)
fwer_combined <- bind_rows(list(indep = fwer_independent,
correl = fwer_correlated,
theor = fwer_theoretical),
.id = "type")
fwers
#| eval: FALSE
methods <- c("none","bonferroni", "BH") %>% set_names()
fwer_correction <- map(methods, \(m) {
calc_disc_rate_adj(results,m)
}) %>% list_rbind(names_to = "method")
fwer_correction_long <- fwer_correction %>%  pivot_longer(
cols = c(fwer, mean_n_type_I, mean_power),
names_to = "metric",
values_to = "value"
)
#| eval: FALSE
ggplot(fwer_correction_long, aes(x = total_tests, y = value, color = method)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
facet_wrap(~ metric, scales = "free_y", ncol = 1,
labeller = as_labeller(c(
fwer = "Familywise Error Rate",
mean_n_type_I = "Number of Type I Errors",
mean_power = "Power (%)"
))) +
scale_color_brewer(palette = "Dark2") +
labs(
x = "Number of tests",
y = "Value",
color = "Correction Method",
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "top",
strip.text = element_text(face = "bold"),
panel.grid.minor = element_blank()
)
fwer_combined
ggplot(fwer_combined,aes(x = total_tests, y = fwer, group = type, colour=type)) + geom_line()
ggplot(fwer_combined,aes(x = total_tests, y = mean_n_type_I, group = type, colour=type)) + geom_line()
n_var <- seq(2,25,5)
independent <- map(n_var, \(i) {
total_tests <- i * (i - 1) / 2
map(1:100, \(j) {
map(1:total_tests, \(k) {
x <- rnorm(20, 0, 1)
y <- rnorm(20, 0, 1)
pval <- t.test(x, y, var.equal = TRUE)$p.value
tibble(n_var = i, total_tests = total_tests, iteration = j,  p = pval)
}) %>% list_rbind()
}) %>% list_rbind()
}) %>% list_rbind()
independent <- map(n_var, \(i) {
total_tests <- i * (i - 1) / 2
map(1:100, \(j) {
map(1:total_tests, \(k) {
x <- rnorm(20, 0, 1)
y <- rnorm(20, 0, 1)
pval <- t.test(x, y, var.equal = TRUE)$p.value
tibble(n_var = i, total_tests = total_tests, iteration = j,  p = pval)
}) %>% list_rbind()
}) %>% list_rbind()
}) %>% list_rbind()
fwer_independent <- independent %>%
group_by(total_tests, iteration) %>%
summarise(any_type_I = any(p <= 0.05), n_type_I = sum(p <= 0.05), .groups = "drop") %>%
group_by(total_tests) %>%
summarise(
fwer = mean(any_type_I),
mean_n_type_I = mean(n_type_I),
.groups = "drop"
)
fwer_independent
#| eval: FALSE
create_nvariables <- function(nvar, n, mean, sd, sd_noise) {
x <- rnorm(n = n, mean = mean, sd = sd)
dat <- map(1:nvar, \(i) {
tibble(!!paste0("var_", i) := x + rnorm(n = n, mean = 0, sd = sd_noise))
}) |>
list_cbind()
dat
}
correlated <- map(n_var, \(i) {
map(1:100, \(j) {
dat <- create_nvariables(i,20,0,1,sd_noise = 1)
combs <- combn(colnames(dat), 2)
map2(dat[combs[1,]],dat[combs[2,]], \(c1,c2) {
pval <- t.test(c1,c2,var.equal=TRUE,alpha=0.05)$p.value
tibble(n_var = i, total_tests = dim(combs)[2], iteration = j,  p = pval)
}) %>% list_rbind()}) %>% list_rbind()}) %>% list_rbind()
#| eval: FALSE
fwer_correlated <- correlated  %>%
group_by(total_tests, iteration) %>%
summarise(any_type_I = any(p <= 0.05), n_type_I = sum(p <= 0.05), .groups = "drop") %>%
group_by(total_tests) %>%
summarise(
fwer = mean(any_type_I),
mean_n_type_I = mean(n_type_I),
.groups = "drop"
)
fwer_theoretical <- tibble(
total_tests = fwers2$total_tests,
fwer = 1 - (1 - 0.05)^total_tests,
mean_n_type_I = 0.05 * total_tests
)
fwer_theoretical <- tibble(
total_tests = fwers_independent$total_tests,
fwer = 1 - (1 - 0.05)^total_tests,
mean_n_type_I = 0.05 * total_tests
)
fwer_theoretical <- tibble(
total_tests = fwer_independent$total_tests,
fwer = 1 - (1 - 0.05)^total_tests,
mean_n_type_I = 0.05 * total_tests
)
fwer_combined <- bind_rows(list(indep = fwer_independent,
correl = fwer_correlated,
theor = fwer_theoretical),
.id = "type")
fwer_combined
#| eval: FALSE
generate_mixed_draws <- function(n = 50, mu_null = 0, mu_alt = 0.5, sd = 1, probs = c(0.8, 0.2)) {
n_var <- seq(3,24,4)
results <- map(n_var, \(i) {
total_tests <- (i * (i - 1) / 2)
n_H0 <- round(total_tests * probs[1])
n_H1 <- total_tests - n_H0
truth <- c(rep("H0_true", n_H0), rep("H1_true", n_H1))
map(1:500, \(j) {
map(1:total_tests, \(k) {
if (truth[k] == "H0_true") {
x <- rnorm(n, mean = mu_null, sd = sd)
y <- rnorm(n, mean = mu_null, sd = sd)
} else {
x <- rnorm(n, mean = mu_null, sd = sd)
y <- rnorm(n, mean = mu_alt, sd = sd)
}
pval <- t.test(x, y, var.equal = TRUE)$p.value
tibble(n_var = i, total_tests = total_tests, iteration = j, truth = truth[k], p = pval)
}) %>% list_rbind()
}) %>% list_rbind()
}) %>% list_rbind()
results
}
results <- generate_mixed_draws()
#| eval: FALSE
generate_mixed_draws <- function(n = 50, mu_null = 0, mu_alt = 0.5, sd = 1, probs = c(0.8, 0.2)) {
n_var <- seq(3,24,4)
results <- map(n_var, \(i) {
total_tests <- (i * (i - 1) / 2)
n_H0 <- round(total_tests * probs[1])
n_H1 <- total_tests - n_H0
truth <- c(rep("H0_true", n_H0), rep("H1_true", n_H1))
map(1:100, \(j) {
map(1:total_tests, \(k) {
if (truth[k] == "H0_true") {
x <- rnorm(n, mean = mu_null, sd = sd)
y <- rnorm(n, mean = mu_null, sd = sd)
} else {
x <- rnorm(n, mean = mu_null, sd = sd)
y <- rnorm(n, mean = mu_alt, sd = sd)
}
pval <- t.test(x, y, var.equal = TRUE)$p.value
tibble(n_var = i, total_tests = total_tests, iteration = j, truth = truth[k], p = pval)
}) %>% list_rbind()
}) %>% list_rbind()
}) %>% list_rbind()
results
}
#| eval: FALSE
generate_mixed_draws <- function(n = 50, mu_null = 0, mu_alt = 0.5, sd = 1, probs = c(0.8, 0.2)) {
n_var <- seq(3,24,4)
results <- map(n_var, \(i) {
total_tests <- (i * (i - 1) / 2)
n_H0 <- round(total_tests * probs[1])
n_H1 <- total_tests - n_H0
truth <- c(rep("H0_true", n_H0), rep("H1_true", n_H1))
map(1:10, \(j) {
map(1:total_tests, \(k) {
if (truth[k] == "H0_true") {
x <- rnorm(n, mean = mu_null, sd = sd)
y <- rnorm(n, mean = mu_null, sd = sd)
} else {
x <- rnorm(n, mean = mu_null, sd = sd)
y <- rnorm(n, mean = mu_alt, sd = sd)
}
pval <- t.test(x, y, var.equal = TRUE)$p.value
tibble(n_var = i, total_tests = total_tests, iteration = j, truth = truth[k], p = pval)
}) %>% list_rbind()
}) %>% list_rbind()
}) %>% list_rbind()
results
}
#| eval: FALSE
generate_mixed_draws <- function(n = 50, mu_null = 0, mu_alt = 0.5, sd = 1, probs = c(0.8, 0.2)) {
n_var <- seq(3,24,4)
results <- map(n_var, \(i) {
total_tests <- (i * (i - 1) / 2)
n_H0 <- round(total_tests * probs[1])
n_H1 <- total_tests - n_H0
truth <- c(rep("H0_true", n_H0), rep("H1_true", n_H1))
map(1:100, \(j) {
map(1:total_tests, \(k) {
if (truth[k] == "H0_true") {
x <- rnorm(n, mean = mu_null, sd = sd)
y <- rnorm(n, mean = mu_null, sd = sd)
} else {
x <- rnorm(n, mean = mu_null, sd = sd)
y <- rnorm(n, mean = mu_alt, sd = sd)
}
pval <- t.test(x, y, var.equal = TRUE)$p.value
tibble(n_var = i, total_tests = total_tests, iteration = j, truth = truth[k], p = pval)
}) %>% list_rbind()
}) %>% list_rbind()
}) %>% list_rbind()
results
}
results <- generate_mixed_draws()
generate_mixed_draws <- function(n = 50, mu_null = 0, mu_alt = 0.5, sd = 1, probs = c(0.8, 0.2)) {
n_var <- seq(3,24,4)
results <- map(n_var, \(i) {
total_tests <- (i * (i - 1) / 2)
n_H0 <- round(total_tests * probs[1])
n_H1 <- total_tests - n_H0
truth <- c(rep("H0_true", n_H0), rep("H1_true", n_H1))
map(1:10, \(j) {
map(1:total_tests, \(k) {
if (truth[k] == "H0_true") {
x <- rnorm(n, mean = mu_null, sd = sd)
y <- rnorm(n, mean = mu_null, sd = sd)
} else {
x <- rnorm(n, mean = mu_null, sd = sd)
y <- rnorm(n, mean = mu_alt, sd = sd)
}
pval <- t.test(x, y, var.equal = TRUE)$p.value
tibble(n_var = i, total_tests = total_tests, iteration = j, truth = truth[k], p = pval)
}) %>% list_rbind()
}) %>% list_rbind()
}) %>% list_rbind()
results
}
results <- generate_mixed_draws()
results
#| eval: FALSE
calc_disc_rate_adj <- function(results,method) {
results %>% group_by(n_var, iteration) %>%
mutate(p_adj = p.adjust(p, method = method),
type_I = case_when(truth == "H0_true" & p_adj <= 0.05 ~ 1,
.default = 0),
true_pos = case_when(truth == "H1_true" & p_adj <= 0.05 ~ 1,
.default = 0)
) %>%
group_by(total_tests, iteration) %>%
summarise(any_type_I = any(type_I == 1), n_type_I = sum(type_I), power = sum(true_pos)/n()*100, .groups = "drop") %>%
group_by(total_tests) %>%
summarise(
fwer = mean(any_type_I),
mean_n_type_I = mean(n_type_I),
mean_power = mean(power),
.groups = "drop"
)
}
#| eval: FALSE
methods <- c("none","bonferroni", "BH") %>% set_names()
fwer_correction <- map(methods, \(m) {
calc_disc_rate_adj(results,m)
}) %>% list_rbind(names_to = "method")
fwer_correction_long <- fwer_correction %>%  pivot_longer(
cols = c(fwer, mean_n_type_I, mean_power),
names_to = "metric",
values_to = "value"
)
#| eval: FALSE
ggplot(fwer_correction_long, aes(x = total_tests, y = value, color = method)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
facet_wrap(~ metric, scales = "free_y", ncol = 1,
labeller = as_labeller(c(
fwer = "Familywise Error Rate",
mean_n_type_I = "Number of Type I Errors",
mean_power = "Power (%)"
))) +
scale_color_brewer(palette = "Dark2") +
labs(
x = "Number of tests",
y = "Value",
color = "Correction Method",
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "top",
strip.text = element_text(face = "bold"),
panel.grid.minor = element_blank()
)
#| eval: FALSE
ggplot(fwer_correction_long, aes(x = total_tests, y = value, color = method)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
facet_wrap(~ metric, scales = "free_y", ncol = 1,
labeller = as_labeller(c(
fwer = "Familywise Error Rate",
mean_n_type_I = "Number of Type I Errors",
mean_power = "Power (%)"
))) +
scale_color_brewer(palette = "Dark2") +
labs(
x = "Number of tests",
y = "Value",
color = "Correction Method",
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "top",
strip.text = element_text(face = "bold"),
panel.grid.minor = element_blank()
)
ps <- tibble(p_values = c(0.31, 0.27, 0.04, 0.58))
p.adj(ps,method="BH")
p.adjust(ps,method="bh")
p.adjust(ps,method="BH")
ps
p.adjust(ps$p_values,method="BH")
#| eval: false
ps %>%
arrange(p_values) %>%
mutate(rank = row_number())
#| eval: false
ps %>%
arrange(p_values) %>%
mutate(rank = row_number(),
b = p_values * (n() / rank))
#| eval: false
ps %>%
arrange(p_values) %>%
mutate(rank = row_number(),
b = p_values * (n() / rank),
p_fdr_adj = case_when(rank == 4 ~ min(b[4]),
rank == 3 ~ min(b[3:4]),
rank == 2 ~ min(b[2:4]),
rank == 1 ~ min(b[1:4])))
