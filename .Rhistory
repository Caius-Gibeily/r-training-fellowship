)
output <- map(n_var, \(i) {
map(1:100, \(j) {
dat <- create_nvariables(i,20,0,1)
combs <- combn(colnames(dat), 2)
map2(dat[combs[1,]],dat[combs[2,]], \(c1,c2) {
pval <- t.test(c1,c2,var.equal=TRUE,alpha=0.05)$p.value
tibble(iteration = j, n_var = i, p = pval, sig = pval <= 0.05)
}) %>% list_rbind()}) %>% list_rbind()}) %>% list_rbind()
output %>%
group_by(n_var, iteration) %>%
summarise(
any_true = any(sig),
n_true = sum(sig),
.groups = "drop"
) %>%
group_by(n_var) %>%
summarise(
prob_1_error = mean(any_true),
n_typeI = mean(n_true),
.groups = "drop"
) %>%
mutate(
total_tests = n_var * (n_var - 1) / 2,
expected_fwer = 1 - (1 - 0.05)^total_tests
)
independent <- map(n_var, \(i) {
map(1:10, \(j) {
map(1:(i * (i - 1) / 2), \(k) {
x <- rnorm(20, 0, 1)
y <- rnorm(20, 0, 1)
pval <- t.test(x, y, var.equal = TRUE)$p.value
tibble(iteration = j, n_var = i, p = pval, sig = pval <= 0.05)
}) %>% list_rbind()
}) %>% list_rbind()
}) %>% list_rbind()
independent %>%
group_by(n_var, iteration) %>%
summarise(any_true = any(sig), n_true = sum(sig), .groups = "drop") %>%
group_by(n_var) %>%
summarise(
prob_1_error = mean(any_true),
n_typeI = mean(n_true),
.groups = "drop"
)
map(1:100, \(j) {
map(1:(i * (i - 1) / 2), \(k) {
x <- rnorm(20, 0, 1)
y <- rnorm(20, 0, 1)
pval <- t.test(x, y, var.equal = TRUE)$p.value
tibble(iteration = j, n_var = i, p = pval, sig = pval <= 0.05)
}) %>% list_rbind()
}) %>% list_rbind()
independent <- map(n_var, \(i) {
map(1:100, \(j) {
map(1:(i * (i - 1) / 2), \(k) {
x <- rnorm(20, 0, 1)
y <- rnorm(20, 0, 1)
pval <- t.test(x, y, var.equal = TRUE)$p.value
tibble(iteration = j, n_var = i, p = pval, sig = pval <= 0.05)
}) %>% list_rbind()
}) %>% list_rbind()
}) %>% list_rbind()
independent <- map(n_var, \(i) {
map(1:100, \(j) {
map(1:(i * (i - 1) / 2), \(k) {
x <- rnorm(20, 0, 1)
y <- rnorm(20, 0, 1)
pval <- t.test(x, y, var.equal = TRUE)$p.value
tibble(iteration = j, n_var = i, p = pval, sig = pval <= 0.05)
}) %>% list_rbind()
}) %>% list_rbind()
}) %>% list_rbind()
independent %>%
group_by(n_var, iteration) %>%
summarise(any_true = any(sig), n_true = sum(sig), .groups = "drop") %>%
group_by(n_var) %>%
summarise(
prob_1_error = mean(any_true),
n_typeI = mean(n_true),
.groups = "drop"
)
independent %>%
group_by(n_var, iteration) %>%
summarise(any_true = any(sig), n_true = sum(sig), .groups = "drop") %>%
group_by(n_var) %>%
summarise(
prob_1_error = mean(any_true),
n_typeI = mean(n_true),
.groups = "drop"
) %>%
mutate(
total_tests = n_var * (n_var - 1) / 2,
expected_fwer = 1 - (1 - 0.05)^total_tests
)
output %>%
group_by(n_var, iteration) %>%
summarise(
any_true = any(sig),
n_true = sum(sig),
.groups = "drop"
) %>%
group_by(n_var) %>%
summarise(
prob_1_error = mean(any_true),
n_typeI = mean(n_true),
.groups = "drop"
) %>%
mutate(
total_tests = n_var * (n_var - 1) / 2,
expected_fwer = 1 - (1 - 0.05)^total_tests
)
output
ggplot(independent,aes(x = p, group= n_var)) +
geom_histogram()
ggplot(independent,aes(x = p, group= n_var, colour = n_var)) +
geom_histogram()
ggplot(independent,aes(x = p, group= n_var, fill = n_var)) +
geom_histogram()
hist(independent$p)
hist(output$p)
ggplot(independent,aes(x = p, group= n_var, fill = n_var)) +
geom_histogram(bins = 100)
ggplot(independent,aes(x = p, group= n_var, fill = n_var)) +
geom_histogram(bins = 100)
ggplot(independent,aes(x = p, group= n_var, fill = n_var)) +
geom_histogram(bins = 20)
independent3 %>% filter(n_var == 2)
i3 <- independent %>% filter(n_var == 2)
ggplot(i3,aes(x = p)) +
geom_histogram(bins = 20)
i3 <- independent %>% filter(n_var == 4)
ggplot(i3,aes(x = p)) +
geom_histogram(bins = 20)
n_var
i3 <- independent %>% filter(n_var == 7)
ggplot(i3,aes(x = p)) +
geom_histogram(bins = 20)
ggplot(i3,aes(x = p, colour = "black")) +
geom_histogram(bins = 20)
ggplot(i3,aes(x = p, colour = "black")) +
geom_histogram(bins = 100)
ggplot(i3,aes(x = p, colour = "black")) +
geom_histogram(bins = 10)
ggplot(i3,aes(x = p, colour = "black")) +
geom_histogram(bins = 15)
ggplot(i3,aes(x = p, colour = "black")) +
geom_histogram(bins = 150)
ggplot(i3,aes(x = p, colour = "black")) +
geom_histogram(bins = 50)
ggplot(i3,aes(x = p, colour = "black")) +
geom_histogram(bins = 5)
ggplot(i3,aes(x = p, colour = "black")) +
geom_histogram(bins = 30)
ggplot(i3,aes(x = p, colour = "black")) +
geom_histogram(bins = 30) +
geom_vline(xintercept = 0.05)
ggplot(independent,aes(x = p, group = n_var, colour = as.factor(n_var))) +
geom_histogram(bins = 30) +
geom_vline(xintercept = 0.05)
independent %>% filter(n_var==22) %>% summarize(n())
independent %>% filter(n_var==2) %>% summarize(n())
ggplot(independent,aes(x = p, group = n_var, fill = as.factor(n_var))) +
geom_histogram(bins = 30) +
geom_vline(xintercept = 0.05)
ggplot(i3,aes(x = p, group = n_var, fill = as.factor(n_var))) +
geom_histogram(bins = 30) +
geom_vline(xintercept = 0.05)
i3 <- independent %>% filter(n_var == 2)
hist(i3)
hist(i3$p)
ggplot(independent,aes(x = p) +
ggplot(independent,aes(x = p)) +
geom_histogram(bins = 30) +
geom_vline(xintercept = 0.05)
ggplot(independent,aes(x = p)) +
geom_histogram(bins = 30) +
geom_vline(xintercept = 0.05)
ggplot(independent,aes(x = p, group = as.factor(n_var), fill = as.factor(n_var))) +
geom_histogram(bins = 30) +
geom_vline(xintercept = 0.05)
ggplot(i3,aes(x = p, group = as.factor(n_var), fill = as.factor(n_var))) +
geom_histogram(bins = 30) +
geom_vline(xintercept = 0.05)
pval_df <- output %>%
unnest(cols = everything()) %>%
mutate(n_var = factor(n_var))
# Plot histogram of p-values per n_var
ggplot(pval_df, aes(x = pval)) +
geom_histogram(
bins = 30,
fill = "steelblue",
color = "white",
alpha = 0.7
) +
facet_wrap(~ n_var, scales = "free_y") +
labs(
title = "Distribution of p-values across different n_var",
x = "p-value",
y = "Count"
) +
theme_minimal(base_size = 14)
ggplot(pval_df, aes(x = p)) +
geom_histogram(
bins = 30,
fill = "steelblue",
color = "white",
alpha = 0.7
) +
facet_wrap(~ n_var, scales = "free_y") +
labs(
title = "Distribution of p-values across different n_var",
x = "p-value",
y = "Count"
) +
theme_minimal(base_size = 14)
pval_df <- output %>%
unnest(cols = everything()) %>%
mutate(n_var = factor(n_var))
ggplot(pval_df, aes(x = p)) +
geom_histogram(
bins = 30,
fill = "steelblue",
color = "white",
alpha = 0.7
) +
facet_wrap(~ n_var, scales = "free_y") +
labs(
title = "Distribution of p-values across different n_var",
x = "p-value",
y = "Count"
) +
theme_minimal(base_size = 14)
ggplot(pval_df, aes(x = p)) +
geom_histogram(
bins = 30,
fill = "steelblue",
color = "white",
alpha = 0.7
) + geom_vline(xintercept = 0.05)
ggplot(pval_df, aes(x = p)) +
geom_histogram(
bins = 30,
fill = "steelblue",
color = "white",
alpha = 0.7
) + geom_vline(xintercept = 0.05) +
facet_wrap(~ n_var, scales = "free_y") +
labs(
title = "Distribution of p-values across different n_var",
x = "p-value",
y = "Count"
) +
theme_minimal(base_size = 14)
ggplot(pval_df, aes(x = p)) +
geom_histogram(
bins = 30,
fill = "steelblue",
color = "white",
alpha = 0.7
) + geom_vline(xintercept = 0.05) +
facet_wrap(~ n_var, scales = "free_y") +
labs(
x = "p-values",
y = "Frequency"
) +
theme_minimal(base_size = 14)
fwer <- output %>%
group_by(n_var, iteration) %>%
summarise(
any_true = any(sig),
n_true = sum(sig),
.groups = "drop"
) %>%
group_by(n_var) %>%
summarise(
prob_1_error = mean(any_true),
n_typeI = mean(n_true),
.groups = "drop"
) %>%
mutate(
total_tests = n_var * (n_var - 1) / 2,
expected_fwer = 1 - (1 - 0.05)^total_tests
)
fwer
ggplot(fwer, aes(x = total_tests)) +
geom_line(aes(y = prop_1_error)) +
geom_line(aes(y = expected_fwer))
ggplot(fwer, aes(x = total_tests)) +
geom_line(aes(y = prob_1_error)) +
geom_line(aes(y = expected_fwer))
ggplot(fwer, aes(x = total_tests)) +
geom_line(aes(y = prob_1_error, colour = "red")) +
geom_line(aes(y = expected_fwer, colour = "blue", linewidth = 1, linetype = "dashed"))
ggplot(fwer, aes(x = total_tests)) +
geom_line(aes(y = prob_1_error, colour = "red")) +
geom_line(aes(y = expected_fwer, colour = "blue"), linewidth = 0.5, linetype = "dashed")
ggplot(fwer, aes(x = total_tests)) +
geom_line(aes(y = prob_1_error, colour = "red"), linewidth = 1) +
geom_line(aes(y = expected_fwer, colour = "blue"), linewidth = 1, linetype = "dashed")
ggplot(fwer, aes(x = total_tests)) +
geom_line(aes(y = prob_1_error, colour = "red"), linewidth = 1) +
geom_line(aes(y = expected_fwer, colour = "blue"), linewidth = 1, linetype = "dashed") +
scale_colour_manual(
name = "FWER Type",
values = c(
"Observed FWER" = "red",
"Expected FWER (independent tests)" = "blue"
)
) +
labs(
title = "Familywise Error Rate vs Number of Tests",
x = "Number of Tests",
y = "Probability of ≥1 Type I Error"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "top",
legend.title = element_text(face = "bold")
)
ggplot(fwer, aes(x = total_tests)) +
geom_line(aes(y = prob_1_error, colour = "Empirical FWER"), linewidth = 1) +
geom_line(aes(y = expected_fwer, colour = "Theoretical FWER"), linewidth = 1, linetype = "dashed") +
scale_colour_manual(
name = "FWER Type",
values = c(
"Empirical FWER" = "red",
"Theoretical FWER" = "blue"
)
) +
labs(
title = "Familywise Error Rate vs Number of Tests",
x = "Number of Tests",
y = "Probability of ≥1 Type I Error"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "top",
legend.title = element_text(face = "bold")
)
pval_df
ggplot(output, aes(x = p)) +
geom_histogram(
bins = 30,
fill = "steelblue",
color = "white",
alpha = 0.7
) + geom_vline(xintercept = 0.05) +
facet_wrap(~ n_var, scales = "free_y") +
labs(
x = "p-values",
y = "Frequency"
) +
theme_minimal(base_size = 14)
fwer2 <- independent %>%
group_by(n_var, iteration) %>%
summarise(any_true = any(sig), n_true = sum(sig), .groups = "drop") %>%
group_by(n_var) %>%
summarise(
prob_1_error = mean(any_true),
n_typeI = mean(n_true),
.groups = "drop"
) %>%
mutate(
total_tests = n_var * (n_var - 1) / 2,
expected_fwer = 1 - (1 - 0.05)^total_tests
)
fwer1 <- output %>%
group_by(n_var, iteration) %>%
summarise(
any_true = any(sig),
n_true = sum(sig),
.groups = "drop"
) %>%
group_by(n_var) %>%
summarise(
prob_1_error = mean(any_true),
n_typeI = mean(n_true),
.groups = "drop"
) %>%
mutate(
total_tests = n_var * (n_var - 1) / 2,
expected_fwer = 1 - (1 - 0.05)^total_tests
)
ggplot(aes(x = total_tests)) +
geom_line(fwer,aes(y = prob_1_error, colour = "Empirical FWER"), linewidth = 1) +
geom_line(fwer,aes(y = expected_fwer, colour = "Theoretical FWER"), linewidth = 1, linetype = "dashed") +
scale_colour_manual(
name = "FWER Type",
values = c(
"Empirical FWER" = "red",
"Theoretical FWER" = "blue"
)
) +
labs(
title = "Familywise Error Rate vs Number of Tests",
x = "Number of Tests",
y = "Probability of at least 1 type I error"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "top",
legend.title = element_text(face = "bold")
)
ggplot() +
geom_line(fwer1, aes(x = total_tests,y = prob_1_error, colour = "Empirical FWER 1"), linewidth = 1) +
geom_line(fwer1, aes(x = total_tests,y = expected_fwer, colour = "Theoretical FWER"), linewidth = 1, linetype = "dashed") +
geom_line(fwer2, aes(x = total_tests,y = prob_1_error, colour = "Empirical FWER 2"), linewidth = 1) +
scale_colour_manual(
name = "FWER Type",
values = c(
"Empirical FWER" = "red",
"Theoretical FWER" = "blue"
)
) +
labs(
title = "Familywise Error Rate vs Number of Tests",
x = "Number of Tests",
y = "Probability of at least 1 type I error"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "top",
legend.title = element_text(face = "bold")
)
ggplot() +
geom_line(data=fwer1, aes(x = total_tests,y = prob_1_error, colour = "Empirical FWER 1"), linewidth = 1) +
geom_line(data=fwer1, aes(x = total_tests,y = expected_fwer, colour = "Theoretical FWER"), linewidth = 1, linetype = "dashed") +
geom_line(data=fwer2, aes(x = total_tests,y = prob_1_error, colour = "Empirical FWER 2"), linewidth = 1) +
scale_colour_manual(
name = "FWER Type",
values = c(
"Empirical FWER" = "red",
"Theoretical FWER" = "blue"
)
) +
labs(
title = "Familywise Error Rate vs Number of Tests",
x = "Number of Tests",
y = "Probability of at least 1 type I error"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "top",
legend.title = element_text(face = "bold")
)
ggplot() +
geom_line(data=fwer1, aes(x = total_tests,y = prob_1_error, colour = "Empirical FWER 1"), linewidth = 1) +
geom_line(data=fwer1, aes(x = total_tests,y = expected_fwer, colour = "Theoretical FWER"), linewidth = 1, linetype = "dashed") +
geom_line(data=fwer2, aes(x = total_tests,y = prob_1_error, colour = "Empirical FWER 2"), linewidth = 1) +
scale_colour_manual(
name = "FWER Type",
values = c(
"Empirical FWER" = "red",
"Theoretical FWER 1" = "blue",
"Theoretical FWER 2" = "purple"
)
) +
labs(
title = "Familywise Error Rate vs Number of Tests",
x = "Number of Tests",
y = "Probability of at least 1 type I error"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "top",
legend.title = element_text(face = "bold")
)
ggplot() +
geom_line(data=fwer1, aes(x = total_tests,y = prob_1_error, colour = "Empirical FWER 1"), linewidth = 1) +
geom_line(data=fwer1, aes(x = total_tests,y = expected_fwer, colour = "Theoretical FWER"), linewidth = 1, linetype = "dashed") +
geom_line(data=fwer2, aes(x = total_tests,y = prob_1_error, colour = "Empirical FWER 2"), linewidth = 1) +
scale_colour_manual(
name = "FWER Type",
values = c(
"Empirical FWER 1" = "red",
"Empirical FWER 2" = "purple",
"Theoretical FWER" = "blue",
)
) +
labs(
title = "Familywise Error Rate vs Number of Tests",
x = "Number of Tests",
y = "Probability of at least 1 type I error"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "top",
legend.title = element_text(face = "bold")
)
ggplot() +
geom_line(data=fwer1, aes(x = total_tests,y = prob_1_error, colour = "Empirical FWER 1"), linewidth = 1) +
geom_line(data=fwer1, aes(x = total_tests,y = expected_fwer, colour = "Theoretical FWER"), linewidth = 1, linetype = "dashed") +
geom_line(data=fwer2, aes(x = total_tests,y = prob_1_error, colour = "Empirical FWER 2"), linewidth = 1) +
scale_colour_manual(
name = "FWER",
values = c(
"Empirical FWER 1" = "red",
"Theoretical FWER" = "blue",
"Empirical FWER 2" = "purple"
)
) +
labs(
title = "Familywise Error Rate vs Number of Tests",
x = "Number of Tests",
y = "Probability of at least 1 type I error"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "top",
legend.title = element_text(face = "bold")
)
