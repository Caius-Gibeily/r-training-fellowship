---
title: R operations
format: live-html
engine: knitr
webr:
  packages:
    - dplyr
output: 
  learnr::tutorial:
    progressive: true
toc: true
---

{{< include ../_extensions/live/_knitr.qmd >}} \## Basic operations in R\

Anything that can be done using a calculator can also be done in R. Why, you might ask, would we want to go to the trouble of learning R syntax for such operations? R, like other programming languages, allows you to combine basic mathematical operations into more complex functions and pipelines that will equip you when you come to filter, transform or simulate data in the future. The basic arithmetic operations in R are multiplication `*`, division `/`, addition, `+`, subtraction `-`, exponentiation `^` and the modulo `%%`. Of course, you need to be aware of the data type of the values you're using. Try using an arithmetic operation on text data

## Running Code

Let's use the different arithmetic operations in the code block below; inspect the output for each operation

```{webr}
#| exercise: ex_1
1 + 2 + 3 + ______
```

```{webr}
#| exercise: ex_2
4 + 2
```

```{webr}
#| exercise: ex_3
4 - 2
```

```{webr}
#| exercise: ex_4
4 / 2
```

```{webr}
#| exercise: ex_5
4^2
```

```{webr}
#| exercise: ex_6
4 %% 2
```

## Assigning variables

R is an object-oriented language. As such, you will find yourself writing and manipulating functions extensively. In other programming languages you might be familiar with, such as Python or MATLAB, variables are typically assigned using `=`. While you may still use this in R, `<-` is typically preferable (take a look [here](https://stat.ethz.ch/R-manual/R-devel/library/base/html/assignOps.html) for different uses of `<-`, `=` and `<<-`). The process is the same for all data types, whether it's numeric, a string or boolean variable:

``` {.markdown filename="roperations.qmd"}

mynumber <- 3
mystring <- "subatomic"
mytruth <- TRUE 
```

Let's try defining a variable. Call it whatever you'd like and then display it. *Hint* pasting the variable will display it.

```{webr}
#| exercise: ex_7
_________
```

## Logical operators

Logical operators are typically used when comparing values or filtering data. The output of a comparison operator is a Boolean TRUE/FALSE. \| Operation \| Usage \| \|--------------------------\|-------\| \| Greater than \| `>` \| \| Less than \| `<` \| \| Greater than or equal to \| `>=` \| \| Less than or equal to \| `<=` \| \| Equal to \| `==` \| \| Not equal to \| `!=` \|

| Operation                | Usage |
|--------------------------|-------|
| Greater than             | \>    |
| Less than                | \<    |
| Greater than or equal to | \>=   |
| Less than or equal to    | \<=   |
| Equal to                 | ==    |
| Not equal to             | !=    |

: Operations

Adjust the following expressions to ensure the output is TRUE. For each one, find all three ways to make the expression true

```{webr}
#| exercise: ex_8
3 / 2 != 1.5
```

```{webr}
#| exercise: ex_9
3^3 < 27
```

Well done! Now feel free to move onto the next section exploring data structures
