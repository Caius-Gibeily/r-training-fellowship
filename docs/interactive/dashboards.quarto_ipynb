{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: Dashboard Example\n",
        "subtitle: Interactive Quarto Dashboards with WebAssembly computation\n",
        "format: live-dashboard\n",
        "pyodide:\n",
        "  packages:\n",
        "    - numpy\n",
        "    - scipy\n",
        "    - matplotlib\n",
        "    - plotly\n",
        "    - nbformat\n",
        "    - ipywidgets\n",
        "---\n",
        "\n",
        "## Row\n",
        "\n",
        "### {.sidebar}\n",
        "\n",
        "```{ojs}\n",
        "viewof sRange = Inputs.range([0, 50], {value: 10, step: 0.5, label: \"sigma\"});\n",
        "viewof bRange = Inputs.range([0, 20], {value: 2.5, step: 0.2, label: \"beta\"});\n",
        "viewof rRange = Inputs.range([0, 50], {value: 28, step: 0.5, label: \"rho\"});\n",
        "sigma = debounce(viewof sRange);\n",
        "beta = debounce(viewof bRange);\n",
        "rho = debounce(viewof rRange);\n",
        "\n",
        "// From @mbostock/debouncing-input\n",
        "function debounce(input, delay = 1000) {\n",
        "  return Generators.observe(notify => {\n",
        "    let timer = null;\n",
        "    let value;\n",
        "    function inputted() {\n",
        "      if (timer !== null) return;\n",
        "      notify(value = input.value);\n",
        "      timer = setTimeout(delayed, delay);\n",
        "    }\n",
        "    function delayed() {\n",
        "      timer = null;\n",
        "      if (value === input.value) return;\n",
        "      notify(value = input.value);\n",
        "    }\n",
        "    input.addEventListener(\"input\", inputted), inputted();\n",
        "    return () => input.removeEventListener(\"input\", inputted);\n",
        "  });\n",
        "}\n",
        "```\n",
        "\n",
        "### Column\n",
        "\n",
        "::: {.card height=\"100%\" title=\"The Lorenz System\"}\n",
        "\n",
        "```{pyodide}\n",
        "#| edit: false\n",
        "#| echo: false\n",
        "#| input:\n",
        "#|   - sigma\n",
        "#|   - beta\n",
        "#|   - rho\n",
        "\n",
        "import plotly.graph_objects as go\n",
        "import numpy as np\n",
        "from scipy import integrate\n",
        "\n",
        "N = 10\n",
        "def solve_lorenz(N=10, max_time=4.0, sigma=10.0, beta=8./3, rho=28.0):\n",
        "  def lorenz_deriv(x_y_z, t0, sigma=sigma, beta=beta, rho=rho):\n",
        "    x, y, z = x_y_z\n",
        "    return [sigma * (y - x), x * (rho - z) - y, x * y - beta * z]\n",
        "  np.random.seed(1)\n",
        "  x0 = -15 + 30 * np.random.random((N, 3))\n",
        "  t = np.linspace(0, max_time, int(250*max_time))\n",
        "  x_t = np.asarray([integrate.odeint(lorenz_deriv, x0i, t) for x0i in x0])\n",
        "  return x_t\n",
        "\n",
        "x_t = solve_lorenz(N, sigma = sigma, beta = beta, rho = rho)\n",
        "fig = go.Figure()\n",
        "for i in range(N):\n",
        "  fig.add_trace(\n",
        "      go.Scatter3d(\n",
        "          x=x_t[i, :, 0],\n",
        "          y=x_t[i, :, 1],\n",
        "          z=x_t[i, :, 2],\n",
        "          showlegend=False,\n",
        "          mode='lines',\n",
        "          line=dict(width=4)\n",
        "      )\n",
        "  )\n",
        "fig.update_layout(\n",
        "    scene_camera_eye=dict(x=1.5, y=-1.5, z=1.5),\n",
        "    width=800,\n",
        "    margin=dict(l=0, r=0, b=0, t=0)\n",
        ")\n",
        "fig\n",
        "```\n",
        ":::"
      ],
      "id": "9fc73500"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\cgibeil@emory.edu\\AppData\\Local\\Programs\\Python\\Python311\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}